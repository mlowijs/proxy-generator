using System;

namespace ProxyGenerator
{
    public interface IProxyGenerator
    {
        /// <summary>
        /// Generates a type that can be used for intercepting the provided service type.
        /// </summary>
        /// <typeparam name="TService">The service to intercept. This should be an interface.</typeparam>
        /// <typeparam name="TProxy">The proxy class to use for intercepting the service call.</typeparam>
        /// <returns>A type implementing the TService interface that intercepts all calls to its methods.</returns>
        Type GenerateProxy<TService, TProxy>() where TProxy : InterceptingDecorator<TService>;
        /// <summary>
        /// Creates a new instance of a type generated using the GenerateProxy method.
        /// </summary>
        /// <param name="args">The constructor arguments for the TProxy class.</param>
        /// <typeparam name="TService">The service to intercept. This should be an interface.</typeparam>
        /// <typeparam name="TProxy">The proxy class to use for intercepting the service call.</typeparam>
        /// <returns>A new instance of the type generated by the GenerateProxy method.</returns>
        TService CreateProxy<TService, TProxy>(params object[] args) where TProxy : InterceptingDecorator<TService>;
    }
}